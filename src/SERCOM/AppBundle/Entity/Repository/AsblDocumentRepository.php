<?php

namespace SERCOM\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AsblDocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AsblDocumentRepository extends EntityRepository{

    public function search($search, $role){
        $result = array();

        if ( $role == 'ROLE_MEMBRE'){
            $result =  $this->getByRole("ROLE_MEMBRE", $search);
        }
        if ( $role == 'ROLE_COMITE'){
            $result = array_merge( $this->getByRole("ROLE_COMITE", $search), $this->getByRole("ROLE_MEMBRE", $search));
        }
        if ( $role == 'ROLE_ANIMATEUR'){
            $result = array_merge( $this->getByRole("ROLE_COMITE", $search), $this->getByRole("ROLE_MEMBRE", $search, $this->getByRole("ROLE_ANIMATEUR",$search)));
        }
        if ( $role == 'ROLE_PRESIDENT'){
            $result = array_merge( $this->getByRole("ROLE_COMITE", $search), $this->getByRole("ROLE_MEMBRE", $search) , $this->getByRole("ROLE_ANIMATEUR",$search) , $this->getByRole("ROLE_PRESIDENT", $search));
        }
        return $result;
    }

    private function getByRole( $role ,$search){
        $query = $this->_em->createQuery('SELECT DISTINCT p FROM SERCOMAppBundle:AsblDocument p JOIN p.souscat s JOIN s.category c JOIN c.sitegroup g WHERE p.name LIKE ?1 AND
                    g.name LIKE ?2  ')
            ->setParameters(array(1 => '%'.$search.'%', 2 => $role));

        $query2 = $this->_em->createQuery('SELECT DISTINCT p FROM SERCOMAppBundle:AsblDocument p JOIN p.tags t JOIN p.souscat s JOIN s.category c JOIN c.sitegroup g
              WHERE  t.tagName LIKE ?1 AND g.name LIKE ?2  ')->setParameters(array(1 => '%'.$search.'%', 2 => $role));

        $res = array();
        $res = array_merge($query->getResult(), $query2->getResult());
        return $res;

    }

    public function getBySousCat($id, $page, $max){
        $query = $this->_em->createQueryBuilder()   ->select('d')
                                                    ->from('SERCOMAppBundle:AsblDocument','d')
                                                    ->where('d.souscat = ?1')
                                                    ->setParameter(1, $id)
                                                    ->setFirstResult(($page-1)*$max)
                                                    ->setMaxResults($max);
        return new Paginator($query);
    }

    public function countDocsSousCat($id){
        return $this->createQueryBuilder('e')->select('COUNT(d)')->from('SERCOMAppBundle:AsblDocument', 'd')->where('d.souscat = ?1')->setParameter(1, $id)->getQuery()->getSingleScalarResult();
    }






}
